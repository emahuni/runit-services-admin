#!/data/data/com.termux/files/usr/bin/bash
# Emmanuel Mahuni (c) 2008 MIT
#

function printHelp {
		echo "$0 - Create a service in the services directory (defaults: SVDIR=\$HOME/.sv)"
		echo
		echo "Usage $0 [--help] name command|path"
		echo " - name is the name of the service to create in the $SVDIR (default SVDIR=\$HOME/.sv)"
		echo " - command is the complete command that runs the service. This includes and args and options."
		echo "   - it should be single quoted to avoid running it"
		echo " - path to a backup copy of service to use instead of creating a new one."
		echo " - you can customise the resulting script later in the service dir for other prelimenaries."
		echo " --help: display this help screen"
}

if  ( [ $# -le 1 ] ) || ( [[ $1 == "--help" ]] ); then printHelp; exit 1; fi
# if  ( [ $# <= 1 ] ) || ( $1 == "help" ) || ( $1 == "--help" ) ||  ( $1 == "-h" ); then printHelp; exit 1; fi

case $# in
		2) command=$2; name=$1;;
		*) printHelp; echo "\nPlease quote your command in single quotes. The command should be one entity and non-executable.\n"; exit 2;;
esac

# make sure we have a default for the services directory
if [ -z "$SVDIR" ]; then SVDIR="$HOME/.sv"; fi

serviceDir="$SVDIR/active/$name"

if [ -d "$serviceDir" ]; then
		echo "Service '$name' already exists as '$serviceDir'.";
		exit 3;
fi


# make the dir tree to the service
(mkdir "$serviceDir" -p)

# create the service run file
echo "#!/data/data/com.termux/files/usr/bin/bash
echo 'Starting $name service...'
# do any preliminaries here, setting of paths ports etc
if [ -z \$sleeping ]; then export sleeping=100; fi

if [ \$fg ]; then
    # run command in the foreground, this is mainly there for testing purposes, when troubleshooting service
    # use fg=1 runsv /path/to/this/service/dir
    # then see if there are any errors or issues when the command runs, this enables you to debug the service
    # nb: the foreground and background commands should be identical except for the redirection. so whatever
    #     changes you do when troubleshooting, reflect them on the background service as well since it is the
    #     default that is run by services admin.
    chpst $command
else
    # run command in the background, this is the actual expected behaviour of services and the default command
    # that is ran by services admin.
    chpst $command >/dev/null 2>&1
fi
" > "$serviceDir/run"


# create the service finish file
echo "#!/data/data/com.termux/files/usr/bin/bash
echo 'Cleaning up after $name service...'
# do any preliminaries here, setting of paths ports etc

if [ \$fg ]; then
    # do something in the foreground
		echo 'wip finish script foreground mode'
else
    # do something in the background
		echo 'wip finish script background mode' >/dev/null 2>&1
fi
" > "$serviceDir/finish"

# mark the files as executable and readonly, only editable by the owner.
(chmod 777 "$serviceDir" "$serviceDir/run" "$serviceDir/finish")

if [[ -x "$serviceDir/run" ]] && [[ -x "$serviceDir/finish"  ]]; then
		echo "'$name' service created successfully!";
elif [[ -e "$serviceDir/run" ]] && [[ -e "$serviceDir/finish"  ]]; then
		echo "Unable to chmod 755 '$name' service files! You probably ran this without root permission.\nDo it manually: sudo chmod 755 $serviceDir/run $serviceDir/finish\n or delete generated service files and try again with: sudo $0 $1 $2.";
else
		echo "Failed to create service $name!";
		echo "This command should be run with root permissions. ie: sudo $0 $1 $2"
		echo "Open the service destination and see if any files were created with 755 permissions.";
fi
